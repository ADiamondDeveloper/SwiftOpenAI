//
//  ChatCompletionChunkObject.swift
//
//
//  Created by James Rochabrun on 10/10/23.
//

import Foundation

/// Represents a [streamed](https://platform.openai.com/docs/api-reference/chat/streaming) chunk of a chat completion response returned by model, based on the provided input.
struct ChatCompletionChunkObject: Decodable {
   
   /// A unique identifier for the chat completion chunk.
   let id: String
   /// A list of chat completion choices. Can be more than one if n is greater than 1.
   let choices: [ChatChoice]
   /// The Unix timestamp (in seconds) of when the chat completion chunk was created.
   let created: Int
   /// The model to generate the completion.
   let model: String
   /// The object type, which is always chat.completion.chunk.
   let object: String

   struct ChatChoice: Decodable {
      
      /// A chat completion delta generated by streamed model responses.
      let delta: Delta
      /// The reason the model stopped generating tokens. This will be stop if the model hit a natural stop point or a provided stop sequence, length if the maximum number of tokens specified in the request was reached, content_filter if content was omitted due to a flag from our content filters, or function_call if the model called a function.
      let finishReason: String?
      /// The index of the choice in the list of choices.
      let index: Int

      struct Delta: Decodable {
         
         /// The contents of the chunk message.
         let content: String?
         /// The name and arguments of a function that should be called, as generated by the model.
         let functionCall: FunctionCall?
         /// The role of the author of this message.
         let role: String?
         
         struct FunctionCall: Decodable {
            
            /// The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
            let arguments: String
            /// The name of the function to call.
            let name: String
         }
         
         enum CodingKeys: String, CodingKey {
             case content
             case functionCall = "function_call"
             case role
         }
      }
      
      enum CodingKeys: String, CodingKey {
          case delta
          case finishReason = "finish_reason"
          case index
      }
   }
}

